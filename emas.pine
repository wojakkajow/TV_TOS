//@version=5
//EMAS
indicator(title="Exponential Moving Averages", shorttitle="EMAs and VWAP", overlay=true)

len1 = input(5, title="ema #1")
src1 = input(close, title=" ta.ema Source #1")
out1 =  ta.ema(src1, len1)
plot(out1, title="ema #1", color=close >= out1 ? #c8e6c9 : #c8e6c9)

len2 = input(9, title="ema #2")
src2 = input(close, title="ema Source #2")
out2 =  ta.ema(src2, len2)
plot(out2, title="ema #2", color=close >= out2 ? #24d3c4 : #24d3c4, linewidth = 1)

len3 = input(14, title="ema #3")
src3 = input(close, title="ema Source #3")
out3 =  ta.ema(src3, len3)
plot(out3, title="ema #3", color=close >= out3 ? #aa24d3 : #aa24d3)

len4 = input(21, title="ema #4")
src4 = input(close, title="ema Source #4")
out4 =  ta.ema(src4, len4)
plot(out4, title="ema #4", color=close >= out4 ? color.yellow : color.yellow)

len5 = input(34, title="ema #5")
src5 = input(close, title="ema Source #5")
out5 =  ta.ema(src5, len5)
plot(out5, title="ema #5", color=close >= out5 ? #f8bbd0 : #f8bbd0, linewidth = 1)

len6 = input(50, title="ema #6")
src6 = input(close, title="ema Source #6")
out6 =  ta.ema(src6, len6)
plot(out6, title="ema #6", color=close >= out6 ? color.green : color.green)

len7 = input(100, title="ema #7")
src7 = input(close, title="ema Source #7")
out7 =  ta.ema(src7, len7)
plot(out7, title="ema #7", color=close >= out7 ? color.blue : color.blue, linewidth = 1)

len8 = input(200, title="ema #8")
src8 = input(close, title="ema Source #8")
out8 =  ta.ema(src8, len8)
plot(out8, title="ema #8", color=close >= out8 ? color.red : color.red)

len9 = input(300, title="ema #9")
src9 = input(close, title="ema Source #9")
out9 =  ta.ema(src9, len9)
plot(out9, title="ema #9", color=close >= out9 ? #0e662d : #0e662d, display = display.none)

len10 = input(400, title="ema #10")
src10 = input(close, title="ema Source #10")
out10 =  ta.ema(src10, len10)
plot(out10, title="ema #10", color=close >= out10 ? #063315 : #063315, linewidth = 1, display = display.none)


//vwap
//indicator(title="Volume Weighted Average Price", shorttitle="VWAP", overlay=true, timeframe="", timeframe_gaps=true)

hideonDWM = input(false, title="Hide VWAP on 1D or Above", group="VWAP Settings")
var anchor = input.string(defval = "Session", title="Anchor Period",
 options=["Session", "Week", "Month", "Quarter", "Year", "Decade", "Century", "Earnings", "Dividends", "Splits"], group="VWAP Settings")
src = input(title = "Source", defval = hlc3, group="VWAP Settings")
offset = input(0, title="Offset", group="VWAP Settings")

showBand_1 = input(false, title="", group="Standard Deviation Bands Settings", inline="band_1")
stdevMult_1 = input(1.0, title="Bands Multiplier #1", group="Standard Deviation Bands Settings", inline="band_1")
showBand_2 = input(false, title="", group="Standard Deviation Bands Settings", inline="band_2")
stdevMult_2 = input(2.0, title="Bands Multiplier #2", group="Standard Deviation Bands Settings", inline="band_2")
showBand_3 = input(false, title="", group="Standard Deviation Bands Settings", inline="band_3")
stdevMult_3 = input(3.0, title="Bands Multiplier #3", group="Standard Deviation Bands Settings", inline="band_3")

if barstate.islast and ta.cum(volume) == 0
    runtime.error("No volume is provided by the data vendor.")

new_earnings = request.earnings(syminfo.tickerid, earnings.actual, barmerge.gaps_on, barmerge.lookahead_on, ignore_invalid_symbol=true)
new_dividends = request.dividends(syminfo.tickerid, dividends.gross, barmerge.gaps_on, barmerge.lookahead_on, ignore_invalid_symbol=true)
new_split = request.splits(syminfo.tickerid, splits.denominator, barmerge.gaps_on, barmerge.lookahead_on, ignore_invalid_symbol=true)

isNewPeriod = switch anchor
	"Earnings"  => not na(new_earnings)
	"Dividends" => not na(new_dividends)
	"Splits"    => not na(new_split)
	"Session"   => timeframe.change("D")
	"Week"      => timeframe.change("W")
	"Month"     => timeframe.change("M")
	"Quarter"   => timeframe.change("3M")
	"Year"      => timeframe.change("12M")
	"Decade"    => timeframe.change("12M") and year % 10 == 0
	"Century"   => timeframe.change("12M") and year % 100 == 0
	=> false

isEsdAnchor = anchor == "Earnings" or anchor == "Dividends" or anchor == "Splits"
if na(src[1]) and not isEsdAnchor
	isNewPeriod := true

float vwapValue = na
float upperBandValue1 = na
float lowerBandValue1 = na
float upperBandValue2 = na
float lowerBandValue2 = na
float upperBandValue3 = na
float lowerBandValue3 = na

if not (hideonDWM and timeframe.isdwm)
    [_vwap, _stdevUpper, _] = ta.vwap(src, isNewPeriod, 1)
	vwapValue := _vwap
    stdevAbs = _stdevUpper - _vwap
	upperBandValue1 := _vwap + stdevAbs * stdevMult_1
	lowerBandValue1 := _vwap - stdevAbs * stdevMult_1
	upperBandValue2 := _vwap + stdevAbs * stdevMult_2
	lowerBandValue2 := _vwap - stdevAbs * stdevMult_2
	upperBandValue3 := _vwap + stdevAbs * stdevMult_3
	lowerBandValue3 := _vwap - stdevAbs * stdevMult_3

plot(vwapValue, title="VWAP", color=#e087cf, offset=offset)

upperBand_1 = plot(upperBandValue1, title="Upper Band #1", color=color.rgb(130, 136, 141), offset=offset, display = showBand_1 ? display.all : display.none)
lowerBand_1 = plot(lowerBandValue1, title="Lower Band #1", color=color.rgb(130, 136, 141), offset=offset, display = showBand_1 ? display.all : display.none)
fill(upperBand_1, lowerBand_1, title="Bands Fill #1", color= color.new(color.green, 95)    , display = showBand_1 ? display.all : display.none)

upperBand_2 = plot(upperBandValue2, title="Upper Band #2", color=color.olive, offset=offset, display = showBand_2 ? display.all : display.none)
lowerBand_2 = plot(lowerBandValue2, title="Lower Band #2", color=color.olive, offset=offset, display = showBand_2 ? display.all : display.none)
fill(upperBand_2, lowerBand_2, title="Bands Fill #2", color= color.new(color.olive, 95)    , display = showBand_2 ? display.all : display.none)

upperBand_3 = plot(upperBandValue3, title="Upper Band #3", color=color.teal, offset=offset, display = showBand_3 ? display.all : display.none)
lowerBand_3 = plot(lowerBandValue3, title="Lower Band #3", color=color.teal, offset=offset, display = showBand_3 ? display.all : display.none)
fill(upperBand_3, lowerBand_3, title="Bands Fill #3", color= color.new(color.teal, 95)    , display = showBand_3 ? display.all : display.none)


//SMAs

len11 = input(5, title="sma #11")
src11 = input(close, title=" ta.sma Source #11")
out11 =  ta.sma(src11, len11)
plot(out11, title="sma #11", color=close >= out11 ? #c8e6c9 : #c8e6c9)

len12 = input(9, title="sma #12")
src12 = input(close, title="sma Source #12")
out12 =  ta.sma(src12, len12)
plot(out12, title="sma #12", color=close >= out12 ? #24d3c4 : #24d3c4, linewidth = 1)

len13 = input(14, title="sma #13")
src13 = input(close, title="sma Source #13")
out13 =  ta.sma(src13, len13)
plot(out13, title="sma #13", color=close >= out13 ? #aa24d3 : #aa24d3)

len14 = input(21, title="sma #14")
src14 = input(close, title="sma Source #14")
out14 =  ta.sma(src14, len14)
plot(out14, title="sma #14", color=close >= out14 ? color.yellow : color.yellow)

len15 = input(34, title="sma #15")
src15 = input(close, title="sma Source #15")
out15 =  ta.sma(src15, len15)
plot(out15, title="sma #15", color=close >= out15 ? #f8bbd0 : #f8bbd0, linewidth = 1)

len16 = input(50, title="sma #16")
src16 = input(close, title="sma Source #16")
out16 =  ta.sma(src16, len16)
plot(out16, title="sma #16", color=close >= out16 ? color.green : color.green)

len17 = input(100, title="sma #17")
src17 = input(close, title="sma Source #17")
out17 =  ta.sma(src17, len17)
plot(out17, title="sma #17", color=close >= out17 ? color.blue : color.blue, linewidth = 1)

len18 = input(200, title="sma #18")
src18 = input(close, title="sma Source #18")
out18 =  ta.sma(src18, len18)
plot(out18, title="sma #18", color=close >= out18 ? color.red : color.red)

len19 = input(300, title="sma #19")
src19 = input(close, title="sma Source #19")
out19 =  ta.sma(src19, len19)
plot(out19, title="sma #19", color=close >= out19 ? #0e662d : #0e662d, display = display.none)

len20 = input(400, title="sma #20")
src20 = input(close, title="sma Source #20")
out20 =  ta.sma(src20, len20)
plot(out20, title="sma #20", color=close >= out20 ? #063315 : #063315, linewidth = 1, display = display.none)